[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Aaron Olson",
    "section": "",
    "text": "I‚Äôm Aaron Olson, a data analyst based in Indianapolis, Indiana.\nI primarily use this site to blog about data analysis. My data interests include geography, demographics, population statistics, and sports. This site was built with Quarto and the R Statistical Programming Language. R is my coding language of choice for statistical analysis and visualization, but I also use JavaScript and SQL when the need arises.\nDisclaimer: Everything on this site comes from my own mind and is not associated with any employer or organization that I am currently or previously attached to :)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "hello. this is my website.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html#first-section",
    "href": "index.html#first-section",
    "title": "marginofaaron.github.io",
    "section": "",
    "text": "Here is some more content"
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Aaron Olson",
    "section": "Education",
    "text": "Education\nUniversity of California, San Diego | San Diego, CA PhD in Mathematics | Sept 2011 - June 2015\nMacalester College | St.¬†Paul MA B.A in Economics | Sept 2007 - June 2011"
  },
  {
    "objectID": "index.html#experience",
    "href": "index.html#experience",
    "title": "Aaron Olson",
    "section": "Experience",
    "text": "Experience\nWengo Analytics | Head Data Scientist | April 2018 - present\nGeoScynce | Chief Analyst | Spet 2012 - April 2018"
  },
  {
    "objectID": "blogposts.html",
    "href": "blogposts.html",
    "title": "Blog",
    "section": "",
    "text": "Annexation Station\n\n\n\nR\n\n\ncensus\n\n\n\nLookout for boundary changes when population totals jump\n\n\n\nAaron Olson\n\n\nDec 14, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMy personal tidycensus guide\n\n\n\nR\n\n\ncensus\n\n\n\nAnalyze Census data ten times faster\n\n\n\nAaron Olson\n\n\nNov 21, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHello, World\n\n\n\nQuarto\n\n\nR\n\n\n\nWelcome to my blog\n\n\n\nAaron Olson\n\n\nOct 21, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2024-10-21-hello-world/index.html",
    "href": "posts/2024-10-21-hello-world/index.html",
    "title": "Hello, World",
    "section": "",
    "text": "Hey there! üëã\nWelcome to my blog. Special thanks to Samantha Csik‚Äôs wonderful guide on setting up a blog on a Quarto website.\nDon‚Äôt worry, I come in peace."
  },
  {
    "objectID": "posts/2024-10-21-hello-world/index.html#code-chunks",
    "href": "posts/2024-10-21-hello-world/index.html#code-chunks",
    "title": "Hello, World",
    "section": "Code chunks",
    "text": "Code chunks\nData analyses in the blog posts on this site are conducted with the R coding language. The code is visible in ‚Äúcode chunks‚Äù like the one below.\n\n\nCode\nlibrary(tidyverse)\n\nhead(iris)\n\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa"
  },
  {
    "objectID": "posts/2024-10-21-hello-world/index.html#viewing-source-code-on-this-site",
    "href": "posts/2024-10-21-hello-world/index.html#viewing-source-code-on-this-site",
    "title": "Hello, World",
    "section": "üîé Viewing source code on this site",
    "text": "üîé Viewing source code on this site\nData analyses in the blog posts on this site are usually conducted with the R coding language. To view the code that generates the analysis, click the ‚Äú&gt; Code‚Äù dropdown button above each chunk.\nThere is also a button on the top right corner of every post with code-folding enabled to globally expand or collapse all code chunks.\n\nCode Chunk Example\nFor example, the code that loads the iris dataset and generates the plot below can be expanded or collapsed by the ‚Äú&gt; Code‚Äù dropdown button.\n\n\nCode\nboxplot(Sepal.Length~Species,\n        data=iris,\n        main='Sepal Length by Species',\n        xlab='Species',\n        ylab='Sepal Length',\n        col='steelblue',\n        border='black')\n\n\n\n\n\nA boxplot of the iris dataset\n\n\n\n\nIt‚Äôs a useful feature of Quarto that allows for documents to be consumed easily by both technical and non-technical readers.\nHappy reading üòÅ"
  },
  {
    "objectID": "posts/2024-11-22-tidycensus-guide/index.html",
    "href": "posts/2024-11-22-tidycensus-guide/index.html",
    "title": "My personal tidycensus guide",
    "section": "",
    "text": "There are many ways to access U.S. Census Bureau data. For years, I used data.census.gov to query data, download spreadsheets, and clean them in Excel. This process was tedious, inefficient, and quite frankly sucked.\nEverything changed when I learned R and discovered the tidycensus package, created by Kyle Walker. Tidycensus uses the Census API to pull data directly into R in a tidy format, making analysis and visualization straightforward.\nThis post is a quick reference for getting started with tidycensus. Even if you‚Äôre new to R, this can be a great motivator to learn. I‚Äôll by demonstrate pulling income data for Indiana‚Äôs 92 counties from the ACS data. For a more comprehensive guide, check out Walker‚Äôs book on the package.\n\n\nIn order to use tidycensus, you must first obtain an API key from the Census Bureau. You can request a key here and should receive it via email shortly.\nOnce you have an API key, you can install the package and set your key. My key will remain invisible in this post, but you should run the following code and fill in the placeholder with your own key if you are following along.\nNote, I am also using the tidyverse package, which is my go-to for data wrangling and visualization.\n\nlibrary(\"tidycensus\")\nlibrary(\"tidyverse\")\n\ncensus_api_key(\"YOUR KEY HERE\", install = TRUE, overwrite = TRUE)\n\n\n\n\nA huge benefit right off the bat is the ability to view all available variables in the ACS data. The code below will pull a list of all variables in the detailed ACS tables for the 2022 5-Year sample. A more in-depth guide to accessing the right variables for your project can be found here.\n\n# load all variables for the 2022 ACS 5-Year sample\nv22 &lt;- load_variables(2022, \"acs5\", cache = TRUE)\n\n# show the first 10 rows of the variables dataframe\nhead(v22)\n\n\n  \n\n\n\nI typically like to open up the varibles dataframe in RStudio‚Äôs viewer pane for easier searching. Here, I‚Äôve searched for ‚Äúmedian household income‚Äù and a ton of options popped up. It can be tricky to pick the right one. My best advice is to scroll over to the right and look at the ‚Äúconcept‚Äù column to see more details.\n\nVariable B19013_001 has a concept description of ‚ÄúMedian Household Income in the Past 12 Months (in 2022 Inflation-Adjusted Dollars)‚Äù, which sounds good.\nAn extra check that you have the right data is to pull that variable for the nation as a whole and compare to what you see on data.census.gov. Below, I‚Äôve gone to the census website and searched for the ‚ÄúB19013‚Äù table and filtered for the 2022 5-Year ACS. The median household income for the U.S. in that year was $75,149\n\nLet‚Äôs see what tidycensus says! The code below is a simple ACS pull for the variable we‚Äôve identified.\n\n# pull the median household income for the U.S. in 2022 (5-Year Sample)\nus_income &lt;- get_acs(\n  geography = \"us\", \n  variables = \"B19013_001\", \n  year = 2022, \n  survey = \"acs5\")\n\n# print the results\nus_income\n\n\n  \n\n\n\nBingo. The numbers match. Now that we know we have identified the variable we want, let‚Äôs pull the data for Indiana‚Äôs 92 counties.\n\n\n\nUsing the same get_acs function, we can pull the median household income for Indiana‚Äôs counties in 2022. Notice in the code below that we are now using ‚Äúcounty‚Äù for the geography argument and ‚ÄúIN‚Äù for the state argument.\nIf the state argument is left blank, the function will pull data for counties nationwide, which can be useful but not necessary for this example.\n\n# pull the median household income for Indiana's 92 counties in 2022 (5-Year Sample)\nin_income &lt;- get_acs(\n  geography = \"county\", \n  variables = \"B19013_001\", \n  state = \"IN\", \n  survey = \"acs5\", \n  year = 2022)\n\n# show the 10 highest income counties\nin_income %&gt;% arrange(desc(estimate))\n\n\n  \n\n\n\nWe can see that Hamilton County had the highest median household income in Indiana in 2022, followed by Boone and Hendricks counties.\n\n\n\nAt this point, we can do all sorts of things to visualize the data. Perhaps you‚Äôd like to see a histogram of household income.\n\n# create a histogram of Indiana's county-level median household income\nin_income %&gt;% \n  ggplot(aes(x = estimate)) +\n  geom_histogram(bins = 20, fill = \"skyblue\", color = \"black\") +\n  labs(title = \"Median Household Income Distribution\",\n       subtitle = \"Indiana Counties\",\n       caption = \"2022 5-Year ACS\",\n       x = \"Median Household Income\",\n       y = \"Count\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nHamilton and Boone counties are clear outliers in the data when it comes to income. The median clusters around $60K.\n\n\n\nOr maybe you‚Äôd like to see the data on a map. In order to prep the data for mapping, all we need to do is re-run the get_acs function with the geometry = TRUE argument. This will pull the spatial data for the counties in Indiana.\nNow that we have the spatial data, we can map the median household income for Indiana‚Äôs counties.\n\n# make a map\nin_income_geo %&gt;%\n  ggplot(aes(fill = estimate)) +\n  geom_sf(color = \"white\") +\n  scale_fill_viridis_c() +\n  labs(title = \"Median Household Income\",\n       subtitle = \"Indiana Counties\",\n       caption = \"Source: American Community Survey\") +\n  theme_void()\n\n\n\n\n\n\n\n\nIf you‚Äôve tried to make maps in one of various softwares before, you should see the incredible value of this workflow. With just a few lines of code, I‚Äôve generated a clean map.\nBut there‚Äôs more!\n\n\nUsing the mapview package, this map can be quickly made interactive. Again, if you‚Äôve mapped before, the efficiency here is truly remarkable.\n\n# make an interactive map\nlibrary(\"mapview\")\n\nin_income_geo %&gt;%\n  mapview::mapview(zcol = \"estimate\", layer.name = \"Median Household Income($))\")\n\n\n\n\n\nThat‚Äôs it. A few more simple lines of code and you have an interactive map.\n\n\n\n\n\n\nIn addition to grabbing an ACS estimate for a single variable for a single year, tidycensus can also pull data over time. Below, I‚Äôve pulled the median household income for Marion County, Indiana from 2012 to 2022.\nThis requires writing a loop using map_dfr from the purrr package. The map_dfr function is helpful to combine the results of each iteration into a single dataframe.\nDon‚Äôt be scared. Once you have the loop written once you can modify and reuse again and again.\n\n# pull median household income for Marion County, Indiana from 2012 to 2022\n# NOTE: 2020 single year ACS estimates were not released due to the pandemic\n\n# specify years\nyears &lt;- c(2012:2019, 2021:2022)\nnames(years) &lt;- years\n\n# run the loop\nincome_by_year &lt;- map_dfr(years, ~{\n  get_acs(\n    geography = \"county\",\n    variables = \"B19013_001\",\n    state = \"IN\",\n    county = \"Marion\",\n    survey = \"acs1\",\n    year = .x\n  )\n}, .id = \"year\")\n\n# make a line graph of the data\nincome_by_year %&gt;%\n  ggplot(aes(x = year, y = estimate, group = 1)) +\n  geom_line(color = \"skyblue\") +\n  labs(title = \"Median Household Income Over Time\",\n       subtitle = \"Marion County, Indiana\",\n       caption = \"Source: American Community Survey\",\n       x = \"Year\",\n       y = \"Median Household Income ($)\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nNOTE: median household income is not adjusted for inflation\n\n\n\nTidycensus supports geographic subsetting, meaning that you can pull data for a certain geography that is contained within a larger geography. For example, you could get median household income for all census tracts within Marion County.\nThat example is below, with the geometry argument set to ‚ÄúTRUE‚Äù required for mapping.\nNow let‚Äôs map the results!\n\n# make a map\nmarion_income %&gt;%\n  ggplot(aes(fill = estimate)) +\n  geom_sf(color = \"white\") +\n  scale_fill_viridis_c() +\n  labs(title = \"Median Household Income\",\n       subtitle = \"Marion County, Indiana\",\n       caption = \"Source: American Community Survey\") +\n  theme_void()\n\n\n\n\n\n\n\n\n\n\n\nTypically when working through geographic analysis with Census data, you will want to have access to more than just one variable. Yet again, tidycensus makes this easy.\nBelow I have pulled the median household income and the percentage of households with broadband internet access for census tracts in Marion County, Indiana in 2022.\nNotice the argument output = \"wide\" in the get_acs function. This argument allows for variables to be split out into multiple columns, making the next step easier.\n\n# pull median household income and percentage of households with broadband internet access for Marion county, Indiana in 2022\n\nmarion_vars &lt;- c(\"B19013_001\", \"S2801_C02_014\")\n\nmarion_vars_data &lt;- get_acs(\n  geography = \"tract\",\n  county = \"Marion\",\n  state = \"IN\",\n  variables = marion_vars,\n  survey = \"acs5\",\n  output = \"wide\",\n  year = 2022\n)\n\nWith both of this variables pulled, perhaps you‚Äôd like to see the geographic relationship between the two. That can easily be done with a scatter plot.\n\n# make a scatter plot of the two variables\nmarion_vars_data %&gt;%\n  ggplot(aes(x = B19013_001E, y = S2801_C02_014E)) +\n  geom_point(color = \"skyblue\") +\n  labs(title = \"Income vs. Broadband Access\",\n       subtitle = \"Marion County, Indiana\",\n       caption = \"Source: American Community Survey\",\n       x = \"Median Household Income ($)\",\n       y = \"Households with Broadband (%)\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nThere‚Äôs so much more you can do. But hopefully this has piqued your interest.\n\n\n\n\n\nTidycensus documentation\nKyle Walker‚Äôs Tidycensus book\nTidyverse package documentation\nMapview package documentation"
  },
  {
    "objectID": "posts/2024-11-22-tidycensus-guide/index.html#installation",
    "href": "posts/2024-11-22-tidycensus-guide/index.html#installation",
    "title": "My personal tidycensus guide",
    "section": "Installation",
    "text": "Installation"
  },
  {
    "objectID": "posts/2024-11-22-tidycensus-guide/index.html#package-installation-and-api-key",
    "href": "posts/2024-11-22-tidycensus-guide/index.html#package-installation-and-api-key",
    "title": "My personal tidycensus guide",
    "section": "",
    "text": "In order to use tidycensus, you must first obtain an API key from the Census Bureau. You can request a key here and should receive it via email shortly.\nOnce you have an API key, you can install the package and set your key. My key will remain invisible in this post, but you should run the following code and fill in the placeholder with your own key if you are following along.\nNote, I am also using the tidyverse package, which is my go-to for data wrangling and visualization.\n\nlibrary(\"tidycensus\")\nlibrary(\"tidyverse\")\n\ncensus_api_key(\"YOUR KEY HERE\", install = TRUE, overwrite = TRUE)"
  },
  {
    "objectID": "posts/2024-11-22-tidycensus-guide/index.html#view-acs-variables",
    "href": "posts/2024-11-22-tidycensus-guide/index.html#view-acs-variables",
    "title": "My personal tidycensus guide",
    "section": "",
    "text": "A huge benefit right off the bat is the ability to view all available variables in the ACS data. The code below will pull a list of all variables in the detailed ACS tables for the 2022 5-Year sample. A more in-depth guide to accessing the right variables for your project can be found here.\n\n# load all variables for the 2022 ACS 5-Year sample\nv22 &lt;- load_variables(2022, \"acs5\", cache = TRUE)\n\n# show the first 10 rows of the variables dataframe\nhead(v22)\n\n\n  \n\n\n\nI typically like to open up the varibles dataframe in RStudio‚Äôs viewer pane for easier searching. Here, I‚Äôve searched for ‚Äúmedian household income‚Äù and a ton of options popped up. It can be tricky to pick the right one. My best advice is to scroll over to the right and look at the ‚Äúconcept‚Äù column to see more details.\n\nVariable B19013_001 has a concept description of ‚ÄúMedian Household Income in the Past 12 Months (in 2022 Inflation-Adjusted Dollars)‚Äù, which sounds good.\nAn extra check that you have the right data is to pull that variable for the nation as a whole and compare to what you see on data.census.gov. Below, I‚Äôve gone to the census website and searched for the ‚ÄúB19013‚Äù table and filtered for the 2022 5-Year ACS. The median household income for the U.S. in that year was $75,149\n\nLet‚Äôs see what tidycensus says! The code below is a simple ACS pull for the variable we‚Äôve identified.\n\n# pull the median household income for the U.S. in 2022 (5-Year Sample)\nus_income &lt;- get_acs(\n  geography = \"us\", \n  variables = \"B19013_001\", \n  year = 2022, \n  survey = \"acs5\")\n\n# print the results\nus_income\n\n\n  \n\n\n\nBingo. The numbers match. Now that we know we have identified the variable we want, let‚Äôs pull the data for Indiana‚Äôs 92 counties."
  },
  {
    "objectID": "posts/2024-11-22-tidycensus-guide/index.html#pulling-indianas-county-level-data",
    "href": "posts/2024-11-22-tidycensus-guide/index.html#pulling-indianas-county-level-data",
    "title": "My personal tidycensus guide",
    "section": "",
    "text": "Using the same get_acs function, we can pull the median household income for Indiana‚Äôs counties in 2022. Notice in the code below that we are now using ‚Äúcounty‚Äù for the geography argument and ‚ÄúIN‚Äù for the state argument.\nIf the state argument is left blank, the function will pull data for counties nationwide, which can be useful but not necessary for this example.\n\n# pull the median household income for Indiana's 92 counties in 2022 (5-Year Sample)\nin_income &lt;- get_acs(\n  geography = \"county\", \n  variables = \"B19013_001\", \n  state = \"IN\", \n  survey = \"acs5\", \n  year = 2022)\n\n# show the 10 highest income counties\nin_income %&gt;% arrange(desc(estimate))\n\n\n  \n\n\n\nWe can see that Hamilton County had the highest median household income in Indiana in 2022, followed by Boone and Hendricks counties."
  },
  {
    "objectID": "posts/2024-11-22-tidycensus-guide/index.html#visualize-the-data",
    "href": "posts/2024-11-22-tidycensus-guide/index.html#visualize-the-data",
    "title": "My personal tidycensus guide",
    "section": "",
    "text": "At this point, we can do all sorts of things to visualize the data. Perhaps you‚Äôd like to see a histogram of household income.\n\n# create a histogram of Indiana's county-level median household income\nin_income %&gt;% \n  ggplot(aes(x = estimate)) +\n  geom_histogram(bins = 20, fill = \"skyblue\", color = \"black\") +\n  labs(title = \"Median Household Income Distribution\",\n       subtitle = \"Indiana Counties\",\n       caption = \"2022 5-Year ACS\",\n       x = \"Median Household Income\",\n       y = \"Count\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nHamilton and Boone counties are clear outliers in the data when it comes to income. The median clusters around $60K."
  },
  {
    "objectID": "posts/2024-11-22-tidycensus-guide/index.html#mapping-the-data",
    "href": "posts/2024-11-22-tidycensus-guide/index.html#mapping-the-data",
    "title": "My personal tidycensus guide",
    "section": "",
    "text": "Or maybe you‚Äôd like to see the data on a map. In order to prep the data for mapping, all we need to do is re-run the get_acs function with the geometry = TRUE argument. This will pull the spatial data for the counties in Indiana.\nNow that we have the spatial data, we can map the median household income for Indiana‚Äôs counties.\n\n# make a map\nin_income_geo %&gt;%\n  ggplot(aes(fill = estimate)) +\n  geom_sf(color = \"white\") +\n  scale_fill_viridis_c() +\n  labs(title = \"Median Household Income\",\n       subtitle = \"Indiana Counties\",\n       caption = \"Source: American Community Survey\") +\n  theme_void()\n\n\n\n\n\n\n\n\nIf you‚Äôve tried to make maps in one of various softwares before, you should see the incredible value of this workflow. With just a few lines of code, I‚Äôve generated a clean map.\nBut there‚Äôs more!\n\n\nUsing the mapview package, this map can be quickly made interactive. Again, if you‚Äôve mapped before, the efficiency here is truly remarkable.\n\n# make an interactive map\nlibrary(\"mapview\")\n\nin_income_geo %&gt;%\n  mapview::mapview(zcol = \"estimate\", layer.name = \"Median Household Income($))\")\n\n\n\n\n\nThat‚Äôs it. A few more simple lines of code and you have an interactive map."
  },
  {
    "objectID": "posts/2024-11-22-tidycensus-guide/index.html#other-tidycensus-capabilities",
    "href": "posts/2024-11-22-tidycensus-guide/index.html#other-tidycensus-capabilities",
    "title": "My personal tidycensus guide",
    "section": "",
    "text": "In addition to grabbing an ACS estimate for a single variable for a single year, tidycensus can also pull data over time. Below, I‚Äôve pulled the median household income for Marion County, Indiana from 2012 to 2022.\nThis requires writing a loop using map_dfr from the purrr package. The map_dfr function is helpful to combine the results of each iteration into a single dataframe.\nDon‚Äôt be scared. Once you have the loop written once you can modify and reuse again and again.\n\n# pull median household income for Marion County, Indiana from 2012 to 2022\n# NOTE: 2020 single year ACS estimates were not released due to the pandemic\n\n# specify years\nyears &lt;- c(2012:2019, 2021:2022)\nnames(years) &lt;- years\n\n# run the loop\nincome_by_year &lt;- map_dfr(years, ~{\n  get_acs(\n    geography = \"county\",\n    variables = \"B19013_001\",\n    state = \"IN\",\n    county = \"Marion\",\n    survey = \"acs1\",\n    year = .x\n  )\n}, .id = \"year\")\n\n# make a line graph of the data\nincome_by_year %&gt;%\n  ggplot(aes(x = year, y = estimate, group = 1)) +\n  geom_line(color = \"skyblue\") +\n  labs(title = \"Median Household Income Over Time\",\n       subtitle = \"Marion County, Indiana\",\n       caption = \"Source: American Community Survey\",\n       x = \"Year\",\n       y = \"Median Household Income ($)\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nNOTE: median household income is not adjusted for inflation\n\n\n\nTidycensus supports geographic subsetting, meaning that you can pull data for a certain geography that is contained within a larger geography. For example, you could get median household income for all census tracts within Marion County.\nThat example is below, with the geometry argument set to ‚ÄúTRUE‚Äù required for mapping.\nNow let‚Äôs map the results!\n\n# make a map\nmarion_income %&gt;%\n  ggplot(aes(fill = estimate)) +\n  geom_sf(color = \"white\") +\n  scale_fill_viridis_c() +\n  labs(title = \"Median Household Income\",\n       subtitle = \"Marion County, Indiana\",\n       caption = \"Source: American Community Survey\") +\n  theme_void()\n\n\n\n\n\n\n\n\n\n\n\nTypically when working through geographic analysis with Census data, you will want to have access to more than just one variable. Yet again, tidycensus makes this easy.\nBelow I have pulled the median household income and the percentage of households with broadband internet access for census tracts in Marion County, Indiana in 2022.\nNotice the argument output = \"wide\" in the get_acs function. This argument allows for variables to be split out into multiple columns, making the next step easier.\n\n# pull median household income and percentage of households with broadband internet access for Marion county, Indiana in 2022\n\nmarion_vars &lt;- c(\"B19013_001\", \"S2801_C02_014\")\n\nmarion_vars_data &lt;- get_acs(\n  geography = \"tract\",\n  county = \"Marion\",\n  state = \"IN\",\n  variables = marion_vars,\n  survey = \"acs5\",\n  output = \"wide\",\n  year = 2022\n)\n\nWith both of this variables pulled, perhaps you‚Äôd like to see the geographic relationship between the two. That can easily be done with a scatter plot.\n\n# make a scatter plot of the two variables\nmarion_vars_data %&gt;%\n  ggplot(aes(x = B19013_001E, y = S2801_C02_014E)) +\n  geom_point(color = \"skyblue\") +\n  labs(title = \"Income vs. Broadband Access\",\n       subtitle = \"Marion County, Indiana\",\n       caption = \"Source: American Community Survey\",\n       x = \"Median Household Income ($)\",\n       y = \"Households with Broadband (%)\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nThere‚Äôs so much more you can do. But hopefully this has piqued your interest."
  },
  {
    "objectID": "posts/2024-11-22-tidycensus-guide/index.html#additional-resources",
    "href": "posts/2024-11-22-tidycensus-guide/index.html#additional-resources",
    "title": "My personal tidycensus guide",
    "section": "",
    "text": "Tidycensus documentation\nKyle Walker‚Äôs Tidycensus book\nTidyverse package documentation\nMapview package documentation"
  },
  {
    "objectID": "posts/2024-12-14-kokomo-annexation/Annexation Station.html",
    "href": "posts/2024-12-14-kokomo-annexation/Annexation Station.html",
    "title": "Annexation Station",
    "section": "",
    "text": "Analyzing population growth over time is a common task in demographic analysis but it can be more complex than it seems, particularly at municipal level. When city borders change, time-series analysis becomes difficult.\nFortunately, R has a series of packages that can help us navigate these challenges. This post details how I approach boundary changes in population analysis, using tidycensus, sf and package name using Kokomo, Indiana as an example.\n\n\n\n\n\n\nNote\n\n\n\nThe analysis in this post uses the tidycensus R package. To learn more about how to set up and use that package, check out my blog post on it here. To view the code behind the analysis, click the dropdowns throughout."
  },
  {
    "objectID": "posts/2024-12-14-kokomo-annexation/Annexation Station.html#kokomos-population-growth",
    "href": "posts/2024-12-14-kokomo-annexation/Annexation Station.html#kokomos-population-growth",
    "title": "Annexation Station",
    "section": "Kokomo‚Äôs Population Growth",
    "text": "Kokomo‚Äôs Population Growth\nAccording to the most recent decennial Census, Kokomo, Indiana‚Äôs population grew from around 45K in 2010 to over 59K in 2020. That seems significant and worth investigating, especially for a small city whose population had hovered between 44K and 47K since the 1960‚Äôs.\nLet‚Äôs turn to tidycensus.\n\n\nLoad packages and set up API key\nlibrary(\"tidycensus\")\nlibrary(\"tidyverse\")\nlibrary('hrbrthemes')\ncensus_api_key(Sys.getenv(\"TIDYCENSUS_KEY\"), install = TRUE, overwrite = TRUE)\n\n\nFigure¬†1 shows the significant increase in the city‚Äôs population between 2010 and 2020. The most logical follow-up is to see whether there is a jump in any particular year, or if the change was more gradual.\n\n\nMake a plot of Kokomo‚Äôs population\n# Get population of Kokomo, Indiana in 2000 using get_decennial\npop_2000 &lt;- get_decennial(geography = \"place\", \n                          variables = \"PCT012001\", \n                          state = \"IN\", \n                          year = 2000) %&gt;%\n  filter(\n    NAME == 'Kokomo city, Indiana'\n  )\n\n# Get population of Kokomo, Indiana in 2010 using get_decennial\npop_2010 &lt;- get_decennial(geography = \"place\", \n                          variables = \"P001001\", \n                          state = \"IN\", \n                          year = 2010)  %&gt;%\n  filter(\n    NAME == 'Kokomo city, Indiana'\n  )\n\n\n# Get population of Kokomo, Indiana in 2020 using get_decennial\npop_2020 &lt;- get_decennial(geography = \"place\", \n                          variables = \"P1_001N\", \n                          state = \"IN\", \n                          year = 2020) %&gt;%\n  filter(\n    NAME == 'Kokomo city, Indiana'\n  )\n\n\n# Combine the three data frames into one\nkokomo_pop_data &lt;- bind_rows(pop_2000, pop_2010, pop_2020)\n\n# add a column for the year\nkokomo_pop_data$year &lt;- c(2000, 2010, 2020)\n\n\n# Plot the population of Kokomo over time in a bar chart \nggplot(kokomo_pop_data, aes(x = year, y = value)) +\n  geom_bar(stat = \"identity\", fill = 'dodgerblue') +\n  labs(title = \"Population of Kokomo, Indiana\",\n       subtitle = \"2000, 2010, and 2020 Decennial Census\",\n       x = \"Year\",\n       y = \"Population\") +\n  theme_ipsum() +\n  theme(axis.text.x = element_text(hjust = 1)) +\n  scale_y_continuous(labels = scales::comma, limits = c(0, 62000)) +\n  geom_text(aes(label = scales::comma(value), y = value), vjust = -0.5)\n\n\n\n\n\n\n\n\nFigure¬†1: Population of Kokomo, Indiana, 2000-2020. Decennial Census\n\n\n\n\n\nIf so, it should set off alarm bells that the city limits may have changed during this time period.\nSome text about the population estimates program chart below."
  },
  {
    "objectID": "posts/2024-12-14-kokomo-annexation/Annexation Station.html#introduction",
    "href": "posts/2024-12-14-kokomo-annexation/Annexation Station.html#introduction",
    "title": "Annexation Station",
    "section": "",
    "text": "Analyzing population growth over time is a common task in demographic analysis but it can be more complex than it seems, particularly at municipal level. When city borders change, time-series analysis becomes difficult.\nFortunately, R has a series of packages that can help us navigate these challenges. This post details how I approach boundary changes in population analysis, using tidycensus, sf and package name using Kokomo, Indiana as an example.\n\n\n\n\n\n\nNote\n\n\n\nThe analysis in this post uses the tidycensus R package. To learn more about how to set up and use that package, check out my blog post on it here. To view the code behind the analysis, click the dropdowns throughout."
  },
  {
    "objectID": "posts/2024-12-14-kokomo-annexation/index.html",
    "href": "posts/2024-12-14-kokomo-annexation/index.html",
    "title": "Annexation Station",
    "section": "",
    "text": "Analyzing population growth over time is a common task in demographic analysis. It can be more complex than it seems, particularly at municipal level where city borders can change quite frequently.\nFortunately, R has a series of packages that can help navigate these challenges. This post details how I approach boundary changes in population analysis, using tidycensus, sf and tigris analyzing Kokomo, Indiana as an example.\n\n\n\n\n\n\nNote\n\n\n\nThe analysis in this post uses the tidycensus R package heavily. To learn more about how to set up and use that package, check out my blog post on it here. To view the code behind the analysis, click the dropdowns throughout the post."
  },
  {
    "objectID": "posts/2024-12-14-kokomo-annexation/index.html#introduction",
    "href": "posts/2024-12-14-kokomo-annexation/index.html#introduction",
    "title": "Annexation Station",
    "section": "",
    "text": "Analyzing population growth over time is a common task in demographic analysis. It can be more complex than it seems, particularly at municipal level where city borders can change quite frequently.\nFortunately, R has a series of packages that can help navigate these challenges. This post details how I approach boundary changes in population analysis, using tidycensus, sf and tigris analyzing Kokomo, Indiana as an example.\n\n\n\n\n\n\nNote\n\n\n\nThe analysis in this post uses the tidycensus R package heavily. To learn more about how to set up and use that package, check out my blog post on it here. To view the code behind the analysis, click the dropdowns throughout the post."
  },
  {
    "objectID": "posts/2024-12-14-kokomo-annexation/index.html#kokomos-population-growth",
    "href": "posts/2024-12-14-kokomo-annexation/index.html#kokomos-population-growth",
    "title": "Annexation Station",
    "section": "Kokomo‚Äôs Population Growth",
    "text": "Kokomo‚Äôs Population Growth\nAccording to the most recent decennial Census, Kokomo, Indiana‚Äôs population grew from around 45K in 2010 to over 59K in 2020. That seems significant and worth investigating, especially for a small city whose population had hovered between 44K and 47K since the 1960‚Äôs.\nLet‚Äôs turn to tidycensus.\n\n\nLoad packages and set up API key\nlibrary(\"tidycensus\")\nlibrary(\"tidyverse\")\nlibrary('hrbrthemes') # to make the plots pretty :)\nlibrary(\"sf\")\nlibrary(\"tigris\")\n\ncensus_api_key(Sys.getenv(\"TIDYCENSUS_KEY\"), install = TRUE, overwrite = TRUE)\n\n\nFigure¬†1 shows the significant increase in the city‚Äôs population between 2010 and 2020. The most logical follow-up is to see whether there is a jump in any particular year, or if the change was more gradual.\n\n\nMake a plot of Kokomo‚Äôs population\n# Get population of Kokomo, Indiana in 2000 using get_decennial\npop_2000 &lt;- get_decennial(geography = \"place\", \n                          variables = \"PCT012001\", \n                          state = \"IN\", \n                          year = 2000) %&gt;%\n  filter(\n    NAME == 'Kokomo city, Indiana'\n  )\n\n# Get population of Kokomo, Indiana in 2010 using get_decennial\npop_2010 &lt;- get_decennial(geography = \"place\", \n                          variables = \"P001001\", \n                          state = \"IN\", \n                          year = 2010)  %&gt;%\n  filter(\n    NAME == 'Kokomo city, Indiana'\n  )\n\n\n# Get population of Kokomo, Indiana in 2020 using get_decennial\npop_2020 &lt;- get_decennial(geography = \"place\", \n                          variables = \"P1_001N\", \n                          state = \"IN\", \n                          year = 2020) %&gt;%\n  filter(\n    NAME == 'Kokomo city, Indiana'\n  )\n\n\n# Combine the three data frames into one\nkokomo_pop_data &lt;- bind_rows(pop_2000, pop_2010, pop_2020)\n\n# add a column for the year\nkokomo_pop_data$year &lt;- c(2000, 2010, 2020)\n\n\n# Plot the population of Kokomo over time in a bar chart \nggplot(kokomo_pop_data, aes(x = year, y = value)) +\n  geom_bar(stat = \"identity\", fill = 'dodgerblue') +\n  labs(title = \"Population of Kokomo, Indiana\",\n       subtitle = \"2000, 2010, and 2020 Decennial Census\",\n       x = \"Year\",\n       y = \"Population\") +\n  theme_ipsum() +\n  theme(axis.text.x = element_text(hjust = 1)) +\n  scale_y_continuous(labels = scales::comma, limits = c(0, 62000)) +\n  geom_text(aes(label = scales::comma(value), y = value), vjust = -0.5)\n\n\n\n\n\n\n\n\nFigure¬†1: Population of Kokomo, Indiana, 2000-2020. Decennial Census.\n\n\n\n\n\nThe year-over-year change in population is shown in Figure¬†2. No doubt about it, 2012 is an outlier. The population increased by over 8,000 people in one year, compared to less than 1,300 in every other observation in this data set.\n\n\n\n\n\n\nNote\n\n\n\nACS population estimates (particular the 5-Year sample) like the ones below aren‚Äôt the most precise population estimates put out by the Census Bureau, they work well enough to show general trends. The 1-Year sample is not available for Kokomo, as it only covers geographies with a population of 65,000 or greater.\n\n\n\n\nMake a plot of Kokomo‚Äôs population change over time\n# get annual population estimates for Kokomo\nyears &lt;- c(2010:2022)\nnames(years) &lt;- years\n\nkokomo_by_year &lt;- map_dfr(years, ~{\n  get_acs(\n    geography = \"place\",\n    variables = \"B01001_001\",\n    state = \"IN\",\n    survey = \"acs5\",\n    year = .x\n  )\n}, .id = \"year\") %&gt;%\n  filter(\n    NAME == 'Kokomo city, Indiana'\n  )\n\n# calculate year over year change in population as a new column\nkokomo_by_year &lt;- kokomo_by_year %&gt;%\n  mutate(\n    pop_change = estimate - lag(estimate),\n    pop_change_pct = (estimate - lag(estimate)) / lag(estimate) * 100\n  )\n\n\n# plot a line chart of the pop_change\nggplot(kokomo_by_year, aes(x = year, y = pop_change, group = 1)) +\n  geom_line(color = 'dodgerblue') +\n  geom_point(color = 'dodgerblue') +\n  labs(title = \"Year over Year Population Change\",\n       subtitle = \"Kokomo, Indiana\",\n       x = \"Year\",\n       y = \"Population Change\") +\n  theme_ipsum() +\n  scale_y_continuous(labels = scales::comma, limits = c(-300, 9000)) +\n  geom_text(aes(label = scales::comma(pop_change), y = pop_change), vjust = -0.5) +\n  scale_x_discrete(breaks = seq(2010, 2022, 2))\n\n\n\n\n\n\n\n\nFigure¬†2: Annual Population Change in Kokomo, Indiana, 2010-2020. ACS."
  },
  {
    "objectID": "posts/2024-12-14-kokomo-annexation/index.html#investigating-city-limit-changes",
    "href": "posts/2024-12-14-kokomo-annexation/index.html#investigating-city-limit-changes",
    "title": "Annexation Station",
    "section": "Investigating City Limit Changes",
    "text": "Investigating City Limit Changes\nBased on the data so far, it appears Kokomo‚Äôs boundaries may have changed around 2012, resulting in annexation of new land and a population increase. To confirm this, I used the tigris package to map the city‚Äôs boundaries over time. The map below shows Kokomo‚Äôs city limits each year from 2014 through 2020 layered on top of one another.\nWhen I attempted to include years before 2014, the tigris package told me that the boundaries were not available for those years. I will address that by importing shapefiles downloaded from the Census website for those specific years later in the post.\n\n\n\n\n\n\nNote\n\n\n\nThere are certainly more elegant ways to write the code below, but in the spirit of the ‚ÄúMake it Work. Make it Right. Make it Fast.‚Äù mantra, this code sits firmly in the ‚ÄúMake it Work‚Äù bucket.\n\n\n\n\nGet Kokomo city borders from 2014 through 2020\n# get kokomo boundaries in 2020\nkokomo_2020 &lt;- places(cb = TRUE, year = 2020) %&gt;%\n  filter(str_detect(NAMELSAD, \"Kokomo city\"))\n\n# write a loop to get kokomo boundaries for each year from 2013 to 2020\nkokomo_boundaries &lt;- map_dfr(2014:2020, ~{\n  places(state = \"IN\", cb = TRUE, year = .x)\n}, .id = \"year\") %&gt;%\n  filter(str_detect(NAME, \"Kokomo\"))\n\n# Add the correct 'year' column \nkokomo_boundaries &lt;- kokomo_boundaries %&gt;% mutate(year = rep(2014:2020, each = nrow(kokomo_boundaries) / 7))\n\n# kokomo census tracts in 2020\nkokomo_2020_tracts &lt;- tracts(state = \"IN\", county = \"Howard\", year = 2020)\n\n# split the kokomo_boundaries file into dataframes of each year of the data\nkokomo_boundaries_2019 &lt;- kokomo_boundaries %&gt;%\n  filter(year == 2019)\nkokomo_boundaries_2018 &lt;- kokomo_boundaries %&gt;%\n  filter(year == 2018)\nkokomo_boundaries_2017 &lt;- kokomo_boundaries %&gt;%\n  filter(year == 2017)\nkokomo_boundaries_2016 &lt;- kokomo_boundaries %&gt;%\n  filter(year == 2016)\nkokomo_boundaries_2015 &lt;- kokomo_boundaries %&gt;%\n  filter(year == 2015)\nkokomo_boundaries_2014 &lt;- kokomo_boundaries %&gt;%\n  filter(year == 2014)\n\n\n\n\nMake a plot of Kokomo city limits from 2014 through 2020\n# plot the city limits\n# add a background map\nkokomo_lims &lt;- ggplot() + \n  geom_sf(data = kokomo_2020_tracts, fill = NA, color = \"grey\") +\n  geom_sf(data = kokomo_2020, fill = NA, color = \"red\") + \n  geom_sf(data = kokomo_boundaries_2019, fill = NA, color = \"blue\") +\n  geom_sf(data = kokomo_boundaries_2018, fill = NA, color = \"green\") +\n  geom_sf(data = kokomo_boundaries_2017, fill = NA, color = \"purple\") +\n  geom_sf(data = kokomo_boundaries_2016, fill = NA, color = \"orange\") +\n  geom_sf(data = kokomo_boundaries_2015, fill = NA, color = \"brown\") +\n  geom_sf(data = kokomo_boundaries_2014, fill = NA, color = \"black\") +\n  # geom_sf(data = kokomo_boundaries, aes(fill = year), color = \"black\") +\n  theme_void()\n\n# add a title to the map\n# add a legend showing that the 2014 boundaries are in black and the 2015-2020 boundaries are in red\nkokomo_lims + labs(title = \"  Kokomo City Limits 2014-2020\", \n                   subtitle = '  2014 boundaries in black; 2015-2020 in red',\n                   caption = 'Howard County Census tracts in grey ')\n\n\n\n\n\n\n\n\nFigure¬†3: Kokomo‚Äôs city limits each year\n\n\n\n\n\nThe boundaries for 2014 are show in black, and the boundaries for years 2015-2020 are showing in red. You can clearly see that between 2014 and 2015, the city expanded to the east and south. However, this expansion doesn‚Äôt appear to have pulled in a significant population addition."
  },
  {
    "objectID": "posts/2024-12-14-kokomo-annexation/index.html#bringing-in-shapefiles-for-earlier-years",
    "href": "posts/2024-12-14-kokomo-annexation/index.html#bringing-in-shapefiles-for-earlier-years",
    "title": "Annexation Station",
    "section": "Bringing in Shapefiles for Earlier Years",
    "text": "Bringing in Shapefiles for Earlier Years\nNext, I imported shapefiles for Kokomo‚Äôs city limits for years before 2014. These files were downloaded from the Census Bureau TIGER Shapefiles website. I used the sf package to read in the shapefiles and plot them with the previously shown boundaries.\n\n\nRead in shapefiles for Kokomo‚Äôs city limits for years before 2014\n# read in shapefiles for Kokomo's city limits for years before 2014\n\n# 2013\nkokomo_boundaries_2013 &lt;- st_read(\"tl_2013_18_place//tl_2013_18_place.shp\")\n\nkokomo_boundaries_2013 &lt;- kokomo_boundaries_2013 %&gt;%\n  filter(str_detect(NAME, \"Kokomo\"))\n\n# 2012\nkokomo_boundaries_2012 &lt;- st_read(\"tl_2012_18_place//tl_2012_18_place.shp\")\n\nkokomo_boundaries_2012 &lt;- kokomo_boundaries_2012 %&gt;%\n  filter(str_detect(NAME, \"Kokomo\"))\n\n# 2011\nkokomo_boundaries_2011 &lt;- st_read(\"tl_2011_18_place//tl_2011_18_place.shp\")\n\nkokomo_boundaries_2011 &lt;- kokomo_boundaries_2011 %&gt;%\n  filter(str_detect(NAME, \"Kokomo\"))\n\n# 2010\nkokomo_boundaries_2010 &lt;- st_read(\"tl_2010_18_place10//tl_2010_18_place10.shp\")\n\nkokomo_boundaries_2010 &lt;- kokomo_boundaries_2010 %&gt;%\n  filter(str_detect(NAME10, \"Kokomo\"))\n\n\n\n\nPlot the city limits each year, 2010-2020\n# plot the city limits\n# add a background map\nkokomo_lims &lt;- ggplot() + \n  geom_sf(data = kokomo_2020_tracts, fill = NA, color = \"grey\") +\n  geom_sf(data = kokomo_2020, fill = NA, color = \"red\") + \n  geom_sf(data = kokomo_boundaries_2019, fill = NA, color = \"blue\") +\n  geom_sf(data = kokomo_boundaries_2018, fill = NA, color = \"green\") +\n  geom_sf(data = kokomo_boundaries_2017, fill = NA, color = \"purple\") +\n  geom_sf(data = kokomo_boundaries_2016, fill = NA, color = \"orange\") +\n  geom_sf(data = kokomo_boundaries_2015, fill = NA, color = \"brown\") +\n  geom_sf(data = kokomo_boundaries_2014, fill = NA, color = \"black\") +\n  geom_sf(data = kokomo_boundaries_2013, fill = NA, color = \"darkgreen\") +\n  geom_sf(data = kokomo_boundaries_2012, fill = NA, color = \"black\") +\n  geom_sf(data = kokomo_boundaries_2011, fill = NA, color = \"dodgerblue2\") +\n  geom_sf(data = kokomo_boundaries_2010, fill = NA, color = \"dodgerblue2\") +\n  theme_void()\n\n# add a title to the map\nkokomo_lims + labs(title = \"  Kokomo City Limits 2010-2020\", \n                   subtitle = '  2010-2011 boundaries in blue\n  2012-2014 boundaries in black \n  2015-2020 in red',\n                   caption = 'Howard County Census tracts in grey ')\n\n\n\n\n\n\n\n\nFigure¬†4: Kokomo‚Äôs city limits each year, 2010-2020\n\n\n\n\n\nBingo!\nJust as the line chart of year-over-year population change showed, the city limits expanded significantly between 2011 and 2012, then expanded even further in 2015.\nThat increase of over 8,000 people in one year was likely due to annexation of new land, not a sudden population boom. As a double-check, some local news articles from the time confirm my initial suspicion."
  },
  {
    "objectID": "posts/2024-12-14-kokomo-annexation/index.html#conclusion",
    "href": "posts/2024-12-14-kokomo-annexation/index.html#conclusion",
    "title": "Annexation Station",
    "section": "Conclusion",
    "text": "Conclusion\nSo, what‚Äôs the solution? There are more advanced techniques that attempt to hold the geographic boundaries steady over time, but that‚Äôs outside the scope of this post. Additionally, you could lean on the Census Bureau‚Äôs population estimates program for more granular population change data.\nA good alternative is to use either counties or county subdivisions (townships) to approximate the same area over time. Center Township in Howard County contains most of Kokomo. Here is the population over time for Center Township. Notice how stable it is.\n\n\nGet population of Center Township, Howard County, Indiana\n# get annual population estimates for Center Township\nyears &lt;- c(2010:2023)\nnames(years) &lt;- years\n\ncenter_by_year &lt;- map_dfr(years, ~{\n  get_acs(\n    geography = \"county subdivision\",\n    variables = \"B01001_001\",\n    state = \"IN\",\n    survey = \"acs5\",\n    year = .x\n  )\n}, .id = \"year\") %&gt;%\n  filter(\n    NAME == 'Center township, Howard County, Indiana'\n  )\n\n\n\n\nPlot Center Township‚Äôs population\n# plot a line chart of center township\nggplot(center_by_year, aes(x = year, y = estimate, group = 1)) +\n  geom_line(color = 'dodgerblue') +\n  geom_point(color = 'dodgerblue') +\n  labs(title = \"Center Township, Howard County\",\n       subtitle = \"Population over time\",\n       x = \"Year\",\n       y = \"Population\") +\n  theme_ipsum() +\n  scale_y_continuous(labels = scales::comma, limits = c(0, 60000)) +\n  scale_x_discrete(breaks = seq(2010, 2023, 2))\n\n\n\n\n\n\n\n\nFigure¬†5: Center Township‚Äôs population, 2010-2023\n\n\n\n\n\nCity boundaries change frequently. When looking at population change‚Äìor any metric that uses population as a denominator‚Äìit‚Äôs import to keep the possibility of annexation in mind.\nThe tidycensus, sf, and tigris packages are a powerful toolkit for ensuring the results of your analysis can be placed in the proper context."
  }
]